/*
 * [New BSD License]
 * Copyright (c) 2011-2012, Brackit Project Team <info@brackit.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Brackit Project Team nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.brackit.query.node;

import org.brackit.query.util.path.Path;
import org.brackit.query.jdm.DocumentException;
import org.brackit.query.jdm.Stream;
import org.brackit.query.jdm.node.Node;

/**
 * @param <E>
 * @author Sebastian Baechle
 */
public abstract class PathStackStream<E> implements Stream<E> {
  /**
   * Input stream of document nodes sorted in document order (pre order),
   * e.g., from a document scan, a path index scan, or an already merged
   * stream from multiple index scans.
   */
  protected final Stream<? extends Node<?>> in;

  /**
   * Path pattern
   */
  protected final Path<String> path;

  private E next;

  public static class Default extends PathStackStream<Node<?>> {
    public Default(Stream<? extends Node<?>> in, Path<String> path) {
      super(in, path);
    }

    @Override
    protected Node<?> match(Node<?>[] matchingNodes) {
      return matchingNodes[matchingNodes.length];
    }
  }

  public PathStackStream(Stream<? extends Node<?>> in, Path<String> path) {
    this.in = in;
    this.path = path;
  }

  /**
   * Create a match result for a found match
   *
   * @param matchingNodes the matching nodes on a path
   * @return
   */
  protected abstract E match(Node<?>[] matchingNodes);

  @Override
  public E next() throws DocumentException {
    // TODO consume input and look for next match(es)
    // for each match, the result output (stored in 'next')
    // is generated by a call of 'match'

    return null;
  }

  @Override
  public void close() {
    in.close();
  }
}
